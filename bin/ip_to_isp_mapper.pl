#!/usr/bin/perl
#
# Gets the ISP to a list of IP addresses using data from the
# iPlane project to map IPs to ASes, and AS to ISP mapping provided 
# by IANA.
# Input file as generated by generate_summary2.pl
# Outputs a file named IP2NAME that maps each IP from the summary file
# to the AS name.
#
# Written by Marcel Dischinger, MPI-SWS 2009
# License: CC BY-SA 3.0 (http://creativecommons.org/licenses/by-sa/3.0/)

use strict;
use warnings;

build_ip_as_map(shift);

sub getName{
  $_ = $_[0];

  s/#.+//; # Remove comments at the end of line

  # Merge some of the ASes of big ISPs
  # and fix renames / mergers
  if(/Comcast/i){ $_ = "Comcast"; }
  elsif(/Cox /i){ $_ = "Cox"; }
  elsif(/AT&amp;T/i){ $_ = "AT&T"; }
  elsif(/ASATTCA/i) { $_ = "AT&T Canada"; }
  elsif(/AT\&T/) { $_ = "AT&T"; }
  elsif(/Bell Canada/i){ $_ = "Bell Canada"; }
  elsif(/Road Runner/i){ $_ = "RoadRunner"; }
  elsif(/Oceanic/i) { $_ = "RoadRunner"; }
  elsif(/BellSouth/i){ $_ = "AT&T"; }
  elsif(/WideOpenWest/i){ $_ = "WideOpenWest"; }
  elsif(/Embarq Corporation/i){ $_ = "CenturyLink"; }
  elsif(/Charter Communications/i){ $_ = "Charter Internet"; }
  elsif(/Earthlink/i){ $_ = "Earthlink"; }
  elsif(/Frontier Communications of America/i){ $_ = "Frontier Communications of America"; }
  elsif(/Consolidated Communications/i){ $_ = "Consolidated Communications"; }
  elsif(/Verizon/i){ $_ = "Verizon"; }
  elsif(/Cogeco cable/i){ $_ = "Cogeco"; }
  elsif(/Cableuropa/i && /ONO/i){ $_ = "ONO"; }
  elsif(/NUMERICABLE/) { $_ = "Numericable"; }
  elsif(/Tiscali UK/) { $_ = "TalkTalk"; }
  elsif(/TalkTalk/i) { $_ = "TalkTalk"; }
  elsif(/Hansenet/i) { $_ = "Telefonica o2"; }
  elsif(/Telefonica o2 Germany/i) { $_ = "Telefonica o2"; }
  elsif(/France Telecom Espana/i) { $_ = "Orange Espana"; }
  elsif(/CABOTV/i) { $_ = "ZON TV"; }
  elsif(/TVCABO/i) { $_ = "ZON TV"; }
  elsif(/Virgin Media/) { $_ = "Virgin Broadband"; }
  elsif(/Qwest/) { $_ = "CenturyLink"; }

  return $_;
}

# Input: Filename with SUMMARY file format
#        or
#        Array of IP addresses
sub build_ip_as_map{

  my (%ip, %as);
  open IP, ">IP";
  if(scalar @_ == 1){
    my $summary_file = $_[0];

    # Look up AS number for IP address

    open IN, $summary_file or die $!;
    while(<IN>){
      /^\d+;([\.\d]+);/;

      if(! defined $ip{$1}){
	$ip{$1} = 1;
	print IP "$1\n";
      }
    }
    close IN;
  }
  else{
    foreach my $ip(@_){
      if(! $ip =~ /(\d+)\.(\d+)\.(\d+)\.(\d+)/){
	die "FATAL: $ip is not an IP address. (build_ip_as_map)"
      }

      $ip{$ip} = 1;
      print IP "$ip\n";
    }
  }
  close IP;

  system("python iptoas.py < IP > IP_to_AS");

  # Read in AS to name mapping
  open IN, "reserved-ases.txt" or die $!;
  while(<IN>){

    next unless(/^AS\d+/);
    chomp;

    my $name;
    my $asnum;
    if(/^AS(\d+)/){
      $asnum = $1;

      if(/^AS\d+ {0,1}$/ || /^AS\d+\ * \+\+/ || /^AS\d+\ * \-/){
	$name = $asnum;
      }
      else{
	/^AS\d+\ * (.+)/;
	$name = getName($1);

	chomp($name);
	if((! defined $name) || $name eq ""){
	  $name = $asnum;
	}
      }
    }
    
    $as{$asnum} = $name;
  }
  close IN;

  my %found;
  open IN, "IP_to_AS" or die $!;
  open I2N, ">IP2NAME" or die $!;
  while(<IN>){
    chomp;

    my @line = split;

    if(! defined $as{$line[1]}){ warn "Cannot find AS Name for $_\n"; $as{$line[1]} = $line[1]; }

    print I2N "$_ $as{$line[1]}\n";

    if(! defined $found{$as{$line[1]}}){
      $found{$as{$line[1]}} = 0;
    }
    $found{$as{$line[1]}} += 1;
  }
  close I2N;
  close IN;

  #open AS, ">AS" or die $!;
  #while(my ($key, $value) = each(%found)){
  #  print AS "$value $key\n";
  #}
  #close AS;
}
